{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Import all necessary libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.metrics import silhouette_score\n",
    "\n",
    "pd.options.display.mpl_style = 'default'\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Load the dataset and store in the variable 'df'\n",
    "df = pd.read_csv('/Users/colby.schrauth/Desktop/DataScience/query_result.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Preview the dataframe\n",
    "#df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#List the columns and store them in the variable 'cols'\n",
    "cols = list(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Push the 'enabled' column to the front of the dataframe\n",
    "cols.insert(0, cols.pop(cols.index('enabled')))\n",
    "\n",
    "#Reorder the dataframe w/ the newly ordered list\n",
    "df = df.ix[:, cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Repeat\n",
    "cols.insert(4, cols.pop(cols.index('#_lang')))\n",
    "df = df.ix[:, cols]\n",
    "\n",
    "#Repeat\n",
    "cols.insert(5, cols.pop(cols.index('#_features')))\n",
    "df = df.ix[:, cols]\n",
    "\n",
    "#Repeat\n",
    "cols.insert(6, cols.pop(cols.index('case_count')))\n",
    "df = df.ix[:, cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Preview the dataframe\n",
    "#df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Replace NaN values in 'acct_geo' w/ 'NA'\n",
    "#df[\"acct_geo\"].replace(np.nan,'NA', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Preview the get_dummies function on the 'acct_geo' column\n",
    "#dummy_update = pd.get_dummies(df[\"acct_geo\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Produce dummy variables for 'acct_geo' and append them to the original dataframe\n",
    "df = pd.concat([df, pd.get_dummies(df['acct_geo'])], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Preview the dataframe\n",
    "#df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Delete the original 'acct_geo' column from the dataframe\n",
    "del df['acct_geo']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Preview the dataframe\n",
    "#df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Print the shape (rows, columns) of 'df'\n",
    "#print df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Standardize the dataset\n",
    "scaler = StandardScaler()\n",
    "df_norm = scaler.fit_transform(df.iloc[:,3:7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Convert df_norm back to a dataframe\n",
    "df_norm = pd.DataFrame(df_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Append the scaled columns back to the original dataframe\n",
    "df = pd.concat((df, df_norm),1)\n",
    "\n",
    "#Keep 'df_norm' as the dataframe to push through the algorithm\n",
    "df_norm = df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Drop the normalized columns in the original dataframe\n",
    "df = df.drop([0, 1, 2, 3], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Drop the non-normalized columns in the new dataframe\n",
    "df_norm = df_norm.drop(['comm_age', '#_lang', '#_features', 'case_count'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Preview the dataframe\n",
    "#df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Rename the normalized columns in the new dataframe back to their proper title\n",
    "df_norm = df_norm.rename(columns = {\n",
    "    0:'comm_age',\n",
    "    1:'#_lang',\n",
    "    2:'#_features',\n",
    "    3:'case_count',\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Preview the dataframe\n",
    "#df_norm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Slice the categorical/text based columns from the dataframe to prepare for clustering\n",
    "df_norm = df_norm.iloc[:,4:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Preview the dataframe\n",
    "#df_norm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x10bb09390>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nY4xj/x9l8LS5m81QXgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x108348e50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Setup a range to iterate through for the sake of plotting the Silhouette Score\n",
    "cluster_range = range(2,21)\n",
    "\n",
    "#Instantiate an empty list to store the results\n",
    "score_list = []\n",
    "\n",
    "#Run a loop through each value for n_clusters\n",
    "for i in cluster_range:\n",
    "    #Instantiate KMeans and fit the data to the curated dataframe\n",
    "    kmeans = KMeans(n_clusters = i, random_state = 1).fit(df_norm)\n",
    "    #Push KMeans labels to the variable 'labels'\n",
    "    labels = kmeans.labels_\n",
    "    #Append each score back to the empty list\n",
    "    score_list.append(silhouette_score(df_norm,labels,metric='euclidean'))\n",
    "\n",
    "#Plot each score vs. n_clusters\n",
    "plt.plot(cluster_range, score_list)\n",
    "plt.xlabel('# of Clusters')\n",
    "plt.ylabel('Silhouette Score')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Find the local maxima to identify the correct # of clusters\n",
    "cluster_count = 2 + max(enumerate(score_list),key=lambda x: x[1])[0]\n",
    "\n",
    "#Display the number of clusters to be used in the model moving forward\n",
    "#cluster_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Instantiate KMeans and cluster the dataset around n (n = 'cluster_count') centroids\n",
    "kmeans = KMeans(n_clusters = cluster_count, random_state = 1).fit(df_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Store labels in the variable 'labels'\n",
    "labels = kmeans.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Store cluster center locations in the variable 'centroids'\n",
    "centroids = kmeans.cluster_centers_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Add labels as a column to the dataframe\n",
    "df['labels'] = labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.28352192539812349"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Display the silhouette score for n clusters\n",
    "silhouette_score(df_norm,labels,metric='euclidean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Display the distribution of accounts by centroid, and whether or not they're enabled\n",
    "#print (pd.crosstab(labels, df[\"enabled\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Create column names for the KMeans summary dataframe\n",
    "summary_columns = ['cluster', 'cluster_total', 'cluster_%', 'enabled_#', 'disabled_#', 'enabled_%', 'disabled_%']\n",
    "#headers = list.pop(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Create an empty list to store summary values\n",
    "summary_values = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Generate values for creating a tabular view of the KMeans summary\n",
    "for i in range(cluster_count):\n",
    "    total_in_cluster = float(len(df[df['labels'] == i]))\n",
    "    enabled_count = len(df[(df['labels']==i) & (df['enabled']==1)])\n",
    "    disabled_count = total_in_cluster - enabled_count\n",
    "    d = [i, total_in_cluster, \"%.4f\" %(total_in_cluster / len(df)), enabled_count, disabled_count,\n",
    "         \"%.4f\" %(enabled_count/total_in_cluster),\n",
    "         \"%.4f\" %(disabled_count/total_in_cluster)]\n",
    "    summary_values.append(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Push summary values to their associated column names and create a dataframe\n",
    "summary_df = pd.DataFrame(summary_values, columns=summary_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cluster</th>\n",
       "      <th>cluster_total</th>\n",
       "      <th>cluster_%</th>\n",
       "      <th>enabled_#</th>\n",
       "      <th>disabled_#</th>\n",
       "      <th>enabled_%</th>\n",
       "      <th>disabled_%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>254</td>\n",
       "      <td>0.2495</td>\n",
       "      <td>186</td>\n",
       "      <td>68</td>\n",
       "      <td>0.7323</td>\n",
       "      <td>0.2677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>248</td>\n",
       "      <td>0.2436</td>\n",
       "      <td>49</td>\n",
       "      <td>199</td>\n",
       "      <td>0.1976</td>\n",
       "      <td>0.8024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>214</td>\n",
       "      <td>0.2102</td>\n",
       "      <td>167</td>\n",
       "      <td>47</td>\n",
       "      <td>0.7804</td>\n",
       "      <td>0.2196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>179</td>\n",
       "      <td>0.1758</td>\n",
       "      <td>130</td>\n",
       "      <td>49</td>\n",
       "      <td>0.7263</td>\n",
       "      <td>0.2737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>86</td>\n",
       "      <td>0.0845</td>\n",
       "      <td>67</td>\n",
       "      <td>19</td>\n",
       "      <td>0.7791</td>\n",
       "      <td>0.2209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>24</td>\n",
       "      <td>0.0236</td>\n",
       "      <td>16</td>\n",
       "      <td>8</td>\n",
       "      <td>0.6667</td>\n",
       "      <td>0.3333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>0.0098</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>0.9000</td>\n",
       "      <td>0.1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0029</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cluster  cluster_total cluster_%  enabled_#  disabled_# enabled_%  \\\n",
       "1        1            254    0.2495        186          68    0.7323   \n",
       "5        5            248    0.2436         49         199    0.1976   \n",
       "0        0            214    0.2102        167          47    0.7804   \n",
       "6        6            179    0.1758        130          49    0.7263   \n",
       "2        2             86    0.0845         67          19    0.7791   \n",
       "4        4             24    0.0236         16           8    0.6667   \n",
       "7        7             10    0.0098          9           1    0.9000   \n",
       "3        3              3    0.0029          3           0    1.0000   \n",
       "\n",
       "  disabled_%  \n",
       "1     0.2677  \n",
       "5     0.8024  \n",
       "0     0.2196  \n",
       "6     0.2737  \n",
       "2     0.2209  \n",
       "4     0.3333  \n",
       "7     0.1000  \n",
       "3     0.0000  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Display the summary table, sorted by disabled in descending order\n",
    "summary_df.sort_values(['cluster_total'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Instantiate PCA, and force it to create 2 columns\n",
    "pca_2 = PCA(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Turn the normalized dataframe into two columns with PCA\n",
    "plot_columns = pca_2.fit_transform(df_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/colby.schrauth/anaconda/lib/python2.7/site-packages/matplotlib/collections.py:590: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  if self._edgecolors == str('face'):\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10bd3cbd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot customers based on the two dimensions, and shade by cluster label\n",
    "plt.scatter(x=plot_columns[:,0], y=plot_columns[:,1], c=kmeans.labels_)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Export the updated dataframe to a csv\n",
    "df.to_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Raw data for plot\n",
    "plot_df = pd.DataFrame(plot_columns)\n",
    "plot_df.to_csv('rawplotdata.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Visualize the KMeans clustering alogrithm\n",
    "for i in range(cluster_count):\n",
    "    # select only data observations with cluster label == i\n",
    "    ds = plot_columns[np.where(kmeans.labels_==i)]\n",
    "    # plot the data observations\n",
    "    plt.plot(ds[:,0],ds[:,1],'o')\n",
    "    # plot the centroids\n",
    "    lines = plt.plot(centroids[i,0],centroids[i,1],'xk')\n",
    "    # make the centroid x's bigger\n",
    "    plt.setp(lines,ms=15.0)\n",
    "    plt.setp(lines,mew=2.0)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Export the updated dataframe to a csv\n",
    "df.to_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#industries (4)\n",
    "#don't normalize binary data\n",
    "#silhoutte score - local maxima (little bump)\n",
    "#number of columns\n",
    "#logistic regression to see if they churned"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "data = df[list(df.columns[3:5])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "data_norm = scaler.fit_transform(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "km = KMeans(n_clusters=5)\n",
    "km.fit(data_norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "centroids = km.cluster_centers_\n",
    "centroids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "labels = km.labels_\n",
    "labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# data = data.as_matrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "k = 5\n",
    "\n",
    "for i in range(k):\n",
    "    # select only data observations with cluster label == i\n",
    "    ds = data_norm[np.where(labels==i)]\n",
    "    # plot the data observations\n",
    "    plt.plot(ds[:,0],ds[:,1],'o')\n",
    "    # plot the centroids\n",
    "    lines = plt.plot(centroids[i,0],centroids[i,1],'kx')\n",
    "    # make the centroid x's bigger\n",
    "    plt.setp(lines,ms=15.0)\n",
    "    plt.setp(lines,mew=2.0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn import cluster\n",
    "centroids,labels,inertia = cluster.k_means(numpyMatrix,n_clusters=k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "print labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "np.savetxt('colby_test.txt', labels) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "kdd_data = pd.read_csv('http://gadatascience.com/datasets/network_attacks/kddcup.data_10_percent', index_col=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "kdd_data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "kdd_data.protocol_type.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction import DictVectorizer\n",
    "\n",
    "# Turn categorical features into 1-hot encoded features\n",
    "categorical_features = kdd_data[['protocol_type', 'service', 'flag']]\n",
    "dv = DictVectorizer()\n",
    "cat_matrix = dv.fit_transform(categorical_features.T.to_dict().values())\n",
    "\n",
    "# Collect the other numerical features\n",
    "from scipy.sparse import hstack\n",
    "other_features = kdd_data[['src_bytes', 'dst_bytes', 'num_failed_logins', 'logged_in', 'num_compromised', 'root_shell', 'su_attempted', 'num_root', 'num_file_creations', 'num_shells', 'num_access_files', 'num_outbound_cmds']]\n",
    "data_matrix = hstack([cat_matrix, other_features])\n",
    "data_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import scale\n",
    "data_matrix = scale(data_matrix.todense())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "clustering_model = KMeans(n_clusters = 25)\n",
    "clustering_model.fit(data_matrix)\n",
    "\n",
    "clusters = clustering_model.predict(data_matrix)\n",
    "\n",
    "clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "results = pd.DataFrame({ 'cluster' : clusters, 'class' : kdd_data['class']})\n",
    "cluster_counts = results.groupby('cluster')['class'].value_counts()\n",
    "for i in xrange(len(cluster_counts)):\n",
    "    print(\"Cluster \" ,i)\n",
    "    print(cluster_counts[i])\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Change of pace ##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# READ IN DATASET\n",
    "votes = pd.read_csv('/Users/colby.schrauth/Desktop/DataScience/114_congress.csv')\n",
    "votes.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# PRINT THE DATASET SHAPE\n",
    "print votes.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# PRINT THE UNIQUE VALUES AND THEIR ASSOCIATED FREQUENCY\n",
    "print (pd.value_counts(votes.iloc[:,3:].values.ravel()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# IMPORT KMEANS\n",
    "from sklearn.cluster import KMeans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# CREATE A KMEANS MODEL W/ 2 CENTROIDS -- RANDOM_STATE HELPS ENSURE THE ALGORITHM RETURNS THE SAME RESULTS EACH TIME\n",
    "kmeans_model = KMeans(n_clusters = 2, random_state = 1).fit(votes.iloc[:,3:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# THESE ARE OUR FITTED LABELS FOR CLUSTERS -- THE FIRST CLUSTER HAS LABEL 0, AND THE SECOND HAS LABEL 1\n",
    "labels = kmeans_model.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# SEPARATE EVERYONE INTO PARTIES BASED ON VOTING HISTORY\n",
    "print (pd.crosstab(labels, votes[\"party\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "**APPENDIX**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Reshape for clustering with one feature input\n",
    "df_norm = np.reshape(df_norm, (len(df), 1))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
